#!/bin/bash 

###############################

function merge_fq {
 

fq=$(pwd)/projects/$directory_name/fast_data/*.fastq.gz
for i in $fq;
do
if      [[ $i == *"R1"* ]];
then
		r1+=$(basename $i)' '
elif 	[[ $i == *"R2"* ]];
then
		r2+=$(basename $i)' '
fi
done;

cd projects/$directory_name/fast_data
cat $r1 > input_R1.fastq.gz
cat $r2 > input_R2.fastq.gz
rm $r1 $r2

r1=
r2=

cd ..
cd ..
cd ..

}




function checkseurat {
		
		
		fast=$(pwd)/projects/$directory_name/sc_data/*
	
for i in $fast;
do
		r+=$i
done; 		
		
if      [[ $r == *".tsv"* ]]
then

        echo  -e '\033[1;36m $(date) Data converting'
	
	format=tsv
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$directory_name/sc_data/ $(basename $r) $null $con
	
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''


	
elif     [[ $r == *".csv"* ]] 
then
        echo  -e '\033[1;36m $(date) Data converting'
	
	format=csv
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$directory_name/sc_data/ $(basename $r) $null $con
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
	
	
	
elif    [[ $r == *".txt"* ]]
then
        
		echo  -e '\033[1;36m $(date) Data converting'
		
	format=txt
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$directory_name/sc_data/ $(basename $r) $null $con
		
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
	
	
		
		
fi

	
		
}


###############################

function TRIMMING {

echo Trimming Start

if [[ $library == 'dropseq' ]];
	then
	source $(pwd)/requirements_file/barcodes_12_8_dropseq

elif [[ $library == '10xv2' ]];
	then	
	source $(pwd)/requirements_file/barcodes_16_10_v2
	
elif [[ $library == '10xv3' ]];
	then
	source $(pwd)/requirements_file/barcodes_16_12_v3
fi


umi_length=$umi_length
barcode_length=$barcode_length



RESULT=$(pwd)/projects/$directory_name/results/
ADAPTERS=$(pwd)/requirements_file/Adapters.fa
INFASTP=$(pwd)/projects/$directory_name/fast_data
CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/fast_data/R1_out_exctracted.fastq.gz || -f $CHECK/sc_data/matrix.mtx ]];
then

	for i in $INFASTP/*.fastq.gz;
	do
	if       [[ $i == *"input_R1"* ]];
	then
			R1=$i
		R1_NAME=$(basename $i)
	elif
			[[ $i == *"input_R2"* ]];
	then
			R2=$i
		R2_NAME=$(basename $i)
	else
			echo 'Not fastq'

	fi
	done;
	
	source $(pwd)/requirements_file/genome.conf
	qc_reads=$qc_reads
	
	cd $INFASTP

	if [[ $qc_reads == *"ON"* ]];
	then

	fastp -i $R1_NAME -I $R2_NAME -o R1_out.fastq.gz -O R2_out.fastq.gz --adapter_fasta $ADAPTERS --trim_poly_x --length_required $[$umi_length + $barcode_length]  --html $RESULT/QC_RAPORT.html 
	
	elif [[ $qc_reads == *"OFF"* ]];
	then

	fastp -i $R1_NAME -I $R2_NAME -o R1_out.fastq.gz -O R2_out.fastq.gz --adapter_fasta $ADAPTERS -Q --trim_poly_x --length_required $[$umi_length + $barcode_length]  --html $RESULT/QC_RAPORT.html 
	
	fi

	cd ..
	cd ..
	cd ..

else 

	echo 'Trimming was done before'
	
fi

}


function whitelist {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/whitelist_barcodes.csv || -f $CHECK/sc_data/matrix.mtx ]];
then

if [[ $library == 'dropseq' ]];
	then
	source $(pwd)/requirements_file/barcodes_12_8_dropseq

elif [[ $library == '10xv2' ]];
	then	
	source $(pwd)/requirements_file/barcodes_16_10_v2
	
elif [[ $library == '10xv3' ]];
	then
	source $(pwd)/requirements_file/barcodes_16_12_v3
fi

	barcode_start=$barcode_start
	barcode_end=$barcode_end
	umi_start=$umi_start
	umi_end=$umi_end
	umi_length=$umi_length
	barcode_length=$barcode_length
	barcode=$barcode

	INFASTP=$(pwd)/projects/$directory_name/fast_data
	tmp=$(pwd)/projects/$directory_name/tmp
	RESULT=$(pwd)/projects/$directory_name/results/

#zmienione

	for i in $INFASTP/*.fastq.gz;
	do
	if       [[ $i == *"R1_out"* ]];
	then
			R1_out=$i
			R1_NAME_out=$(basename $i)
	elif
			[[ $i == *"R2_out"* ]];
	then
			R2=$i
			R2_NAME_out=$(basename $i)
	else
			echo 'Next step =>'
	fi
	done;


	cd $(pwd)/projects/$directory_name/fast_data
	umi_tools whitelist --stdin $R1_NAME_out --bc-pattern=$barcode --extract-method=regex --set-cell-number=$cell --subset-reads 1000000000 --error-correct-threshold=2  --ed-above-threshold=correct --plot-prefix=$RESULT/expect_whitelist --log2stderr > $tmp/whitelist.csv ;
	umi_tools extract --bc-pattern=$barcode --extract-method=regex --stdin=$R1_NAME_out --stdout=R1_out_exctracted.fastq.gz --read2-in=$R2_NAME_out --read2-out=R2_out_extracted.fastq.gz --error-correct-cell --subset-reads 1000000000 --reconcile-pairs  --whitelist=$tmp/whitelist.csv
	gunzip R2_out_extracted.fastq.gz


	cat $tmp/whitelist.csv | cut -f 1 > $tmp/whitelist_barcodes.csv ;

	cell=`cat $tmp/whitelist_barcodes.csv  | wc -l`

	echo 'Cells detected - ' $cell

	rm R1_out.fastq.gz
	
	cd ..
	cd ..
	cd ..
	
else 

	echo 'Whitelist was done before'
	
fi


}




function STAR_MAPPING {

echo Mapping Start

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/Aligned.out.bam || -f $CHECK/sc_data/matrix.mtx ]];
then


	RESULT=$(pwd)/projects/$directory_name/results/
	INFASTP=$(pwd)/projects/$directory_name/fast_data
	cpu=$(grep -c ^processor /proc/cpuinfo)
	cpu=$[$cpu-2]
	DIR=$(pwd)/genome/$species/index/$READS_LENGHT 
	tmp=$(pwd)/projects/$directory_name/tmp/



	for i in $INFASTP/*.fastq;
	do
	if       [[ $i == *"R1_out_extracted"* ]];
	then
			R1_map=$i
			R1_NAME_map=$(basename $i)
	elif
			[[ $i == *"R2_out_extracted"* ]];
	then
			R2_map=$i
			R2_NAME_map=$(basename $i)
	else
        echo 'Next step =>'
	fi
	done;

	R2_FILE=$INFASTP'/'$R2_NAME_map

	STAR --outReadsUnmapped Fastx --outFilterMismatchNmax 20 --outSAMtype BAM Unsorted --outFilterMultimapNmax 20 --outFilterMismatchNoverLmax 0.3 --outFilterMismatchNoverReadLmax 1 --outFilterMatchNmin 0 --outFilterScoreMinOverLread 0.33 --outFilterMatchNminOverLread 0.33  --runThreadN $cpu --genomeDir $DIR --readFilesIn $R2_FILE --outFileNamePrefix $tmp --outStd Log  > $RESULT/Log.final.out 2>&1

else 

	echo 'Mapping was done before'
	
fi


}

function add_tags {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/final.bam || -f $CHECK/sc_data/matrix.mtx ]];
then

if [[ $library == 'dropseq' ]];
	then
	source $(pwd)/requirements_file/barcodes_12_8_dropseq

elif [[ $library == '10xv2' ]];
	then	
	source $(pwd)/requirements_file/barcodes_16_10_v2
	
elif [[ $library == '10xv3' ]];
	then
	source $(pwd)/requirements_file/barcodes_16_12_v3
fi

	barcode_start=$barcode_start
	barcode_end=$barcode_end
	umi_start=$umi_start
	umi_end=$umi_end
	umi_length=$umi_length
	barcode_length=$barcode_length
	barcode=$barcode

	tmp=$(pwd)/projects/$directory_name/tmp

	samtools view -h $tmp/*.out.bam | sed 's/_/XC:Z:/' | grep -oE "XC:Z:[acgtnACGTN-]+" > $tmp/barcodes.sam
	samtools view -h $tmp/*.out.bam | sed 's/_/XC:Z:/' | sed 's/_/XM:Z:/' | grep -oE "XM:Z:[acgtnACGTN-]+" > $tmp/umis.sam

	SCRIPTS_EXTRACT=$(pwd)/scripts
	python3 $SCRIPTS_EXTRACT/add_tags.py $tmp/barcodes.sam $tmp/umis.sam $tmp/*.out.bam $tmp/final.bam $barcode_length $umi_length

else 

	echo 'Tags were added before'
	
fi


}





function dropSEQ {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/gene_exon_tagged.bam || -f $CHECK/sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar TagReadWithGeneFunction \
			INPUT=$(pwd)/projects/$directory_name/tmp/final.bam \
			OUTPUT=$(pwd)/projects/$directory_name/tmp/gene_exon_tagged.bam \
			ANNOTATIONS_FILE=$(pwd)/genome/$species/correct_annotation.refFlat 
		
else 

	echo 'TagGene was done before'
	
fi


}

function final_exon {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/gene_exon_tagged_error.bam || -f $CHECK/sc_data/matrix.mtx ]];
then
	cpu=$(grep -c ^processor /proc/cpuinfo)
	cpu=$[$cpu-2]

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DetectBeadSubstitutionErrors \
			I=$(pwd)/projects/$directory_name/tmp/gene_exon_tagged.bam \
			O=$(pwd)/projects/$directory_name/tmp/gene_exon_tagged_error.bam \
			OUTPUT_REPORT=$(pwd)/projects/$directory_name/tmp/beadSubstitutionReport.txt \
			OUTPUT_SUMMARY=$(pwd)/projects/$directory_name/tmp/beadSubstitutionSummary.txt \
			NUM_THREADS=$cpu
else 

	echo 'Barcodes repair was done before'
	
fi


}

function completed_bam {



CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/results/Completed.bam || -f $CHECK/sc_data/matrix.mtx ]];
then

	tmp=$(pwd)/projects/$directory_name/tmp
	cell=`cat $tmp/whitelist_barcodes.csv  | wc -l`

	cpu=$(grep -c ^processor /proc/cpuinfo)
	cpu=$[$cpu-2]

	source $(pwd)/requirements_file/smart_primer
	smart=$smart

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DetectBeadSynthesisErrors \
			INPUT=$(pwd)/projects/$directory_name/tmp/gene_exon_tagged_error.bam \
			OUTPUT=$(pwd)/projects/$directory_name/results/Completed.bam \
			OUTPUT_STATS=$(pwd)/projects/$directory_name/tmp/synthesis_stats.txt \
			SUMMARY=$(pwd)/projects/$directory_name/tmp/synthesis_stats_summary.txt \
			NUM_BARCODES=$[$cell*1,25] \
			PRIMER_SEQUENCE=$smart \
			NUM_THREADS=$cpu
else 

	echo 'SynthesisError was done before'
	
fi


}



##EXPRESSION FILE AND STATS
function umi_extract {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/selected_cells.sc || -f $CHECK/sc_data/matrix.mtx ]];
then
	tmp=$(pwd)/projects/$directory_name/tmp
	results=$(pwd)/projects/$directory_name/results
	
	samtools view $results/Completed.bam | grep -oE "XC:Z:[acgtnACGTN-]+" > $tmp/repaired_barcodes.sam
	cat $tmp/repaired_barcodes.sam | sort | uniq -c | sort -nr | sed 's/XC:Z:/\t/' > $tmp/barcode_stat.txt
	awk '{if($1 > 2450) print $2}' $tmp/barcode_stat.txt > $tmp/selected_cells.sc

else 

	echo 'UMI extraction was done before'
	
fi


}

function umi_expression {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/umi_expression.tsv || -f $CHECK/sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DigitalExpression \
			I=$(pwd)/projects/$directory_name/results/Completed.bam \
			O=$(pwd)/projects/$directory_name/tmp/umi_expression.tsv \
			EDIT_DISTANCE=2 \
			OUTPUT_LONG_FORMAT=$(pwd)/projects/$directory_name/tmp/umi_expression.long \
			STRAND_STRATEGY=BOTH\
			OUTPUT_READS_INSTEAD=false\
			LOCUS_FUNCTION_LIST={INTERGENIC,INTRONIC,UTR,CODING,RIBOSOMAL}\
			MIN_BC_READ_THRESHOLD=0\
			CELL_BC_FILE=$(pwd)/projects/$directory_name/tmp/selected_cells.sc
			
else 

	echo 'DEG was done before'
	
fi


}


function scRNAmetrics {

CHECK=$(pwd)/projects/$directory_name

if ! [[ -f $CHECK/tmp/scRNAmetrics.txt || -f $CHECK/sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar SingleCellRnaSeqMetricsCollector \
			INPUT=$(pwd)/projects/$directory_name/results/Completed.bam\
			OUTPUT=$(pwd)/projects/$directory_name/results/scRNAmetrics.txt\
			ANNOTATIONS_FILE=$(pwd)/genome/$species/correct_annotation.refFlat \
			CELL_BC_FILE=$(pwd)/projects/$directory_name/tmp/selected_cells.sc \
			RIBOSOMAL_INTERVALS=$(pwd)/genome/$species/annotation.rRNA.intervals
        
else 

	echo 'Metrics were done before'
	
fi	

}


function metric_plot {

CHECK=$(pwd)/projects/$directory_name/sc_data

if ! [[ -f $CHECK/matrix.mtx ]];
then

	path_metric=$(pwd)/projects/$directory_name/results
	path_result=$(pwd)/projects/$directory_name/results

	SCRIPTS_EXTRACT=$(pwd)/scripts

	Rscript $SCRIPTS_EXTRACT/rna_metrics.R $path_metric $path_result

else 

	echo 'Plot was done before'
	
fi

}




function convert_mtx_umi {

CHECK=$(pwd)/projects/$directory_name/sc_data

if ! [[ -f $CHECK/matrix.mtx ]];
then

	path_convert=$(pwd)/projects/$directory_name/sc_data
	mkdir -p $path_convert
	path_tmp_mtx=$(pwd)/projects/$directory_name/tmp

	format=tsv
	con=raw
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $path_convert $null $path_tmp_mtx $con
	
else 

	echo 'Conversion was done before'
	
fi

}


function seurat {

PATH_PROJECT=$(pwd)/projects/$directory_name
MARKERS=$marker_path
tissue=$tissue
cell_development_status=$cell_development_status
data=3

SCRIPTS_EXTRACT=$(pwd)/scripts
Rscript $SCRIPTS_EXTRACT/seurat_cluster_species.R $PATH_PROJECT $MARKERS $species $directory_name $data $cell $tissue $cell_development_status

cp $SCRIPTS_EXTRACT/manual_species.R $PATH_PROJECT/results
mv $PATH_PROJECT/results/manual_species.R $PATH_PROJECT/results/manual_analysis.R 

CHECK=$(pwd)/projects/$directory_name/sc_data
if [[ -f $CHECK/matrix.mtx ]];
then	
rm -rf $PATH_PROJECT/tmp
rm -rf $PATH_PROJECT/fast_data/R1_out_exctracted.fastq.gz
rm -rf $PATH_PROJECT/fast_data/R2_out_extracted.fastq
rm -rf $PATH_PROJECT/fast_data/R2_out.fastq.gz
rm -rf $PATH_PROJECT/results/HDMAP_subtypes_files
rm -rf $PATH_PROJECT/results/UMAP_with_DE_gene_subtypes_files
rm -rf $PATH_PROJECT/results/.Rhistory
rm -rf $PATH_PROJECT/results/Completed.bam
rm -rf $PATH_PROJECT/results/*.svg
rm -rf $PATH_PROJECT/results/HDMAP_subtypes.html
rm -rf $PATH_PROJECT/results/*.csv
rm -rf $PATH_PROJECT/results/UMAP_with_DE_gene_subtypes.html
rm -rf $PATH_PROJECT/results/*.jpeg
rm -rf $PATH_PROJECT/results/scRNAmetrics.html
rm -rf $PATH_PROJECT/results/*.txt


fi


}
